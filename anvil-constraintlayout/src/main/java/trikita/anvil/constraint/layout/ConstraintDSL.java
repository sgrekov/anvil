package trikita.anvil.constraint.layout;

import android.support.constraint.Barrier;
import android.support.constraint.ConstraintHelper;
import android.support.constraint.ConstraintLayout;
import android.support.constraint.ConstraintSet;
import android.support.constraint.Constraints;
import android.support.constraint.Group;
import android.support.constraint.Guideline;
import android.support.constraint.Placeholder;
import android.view.View;
import java.lang.Boolean;
import java.lang.Float;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.lang.Void;
import trikita.anvil.Anvil;
import trikita.anvil.BaseDSL;

/**
 * DSL for creating views and settings their attributes.
 * This file has been generated by {@code gradle generateConstraintDSL}.
 * It contains views and their setters from the library constraint-layout.
 * Please, don't edit it manually unless for debugging.
 */
public final class ConstraintDSL implements Anvil.AttributeSetter {
  static {
    Anvil.registerAttributeSetter(new ConstraintDSL());
  }

  public static BaseDSL.ViewClassResult barrier() {
    return BaseDSL.v(Barrier.class);
  }

  public static Void barrier(Anvil.Renderable r) {
    return BaseDSL.v(Barrier.class, r);
  }

  public static BaseDSL.ViewClassResult constraintHelper() {
    return BaseDSL.v(ConstraintHelper.class);
  }

  public static Void constraintHelper(Anvil.Renderable r) {
    return BaseDSL.v(ConstraintHelper.class, r);
  }

  public static BaseDSL.ViewClassResult constraintLayout() {
    return BaseDSL.v(ConstraintLayout.class);
  }

  public static Void constraintLayout(Anvil.Renderable r) {
    return BaseDSL.v(ConstraintLayout.class, r);
  }

  public static BaseDSL.ViewClassResult constraints() {
    return BaseDSL.v(Constraints.class);
  }

  public static Void constraints(Anvil.Renderable r) {
    return BaseDSL.v(Constraints.class, r);
  }

  public static BaseDSL.ViewClassResult group() {
    return BaseDSL.v(Group.class);
  }

  public static Void group(Anvil.Renderable r) {
    return BaseDSL.v(Group.class, r);
  }

  public static BaseDSL.ViewClassResult guideline() {
    return BaseDSL.v(Guideline.class);
  }

  public static Void guideline(Anvil.Renderable r) {
    return BaseDSL.v(Guideline.class, r);
  }

  public static BaseDSL.ViewClassResult placeholder() {
    return BaseDSL.v(Placeholder.class);
  }

  public static Void placeholder(Anvil.Renderable r) {
    return BaseDSL.v(Placeholder.class, r);
  }

  public static Void allowsGoneWidget(boolean arg) {
    return BaseDSL.attr("allowsGoneWidget", arg);
  }

  public static Void constraintSet(ConstraintSet arg) {
    return BaseDSL.attr("constraintSet", arg);
  }

  public static Void contentId(int arg) {
    return BaseDSL.attr("contentId", arg);
  }

  public static Void emptyVisibility(int arg) {
    return BaseDSL.attr("emptyVisibility", arg);
  }

  public static Void guidelineBegin(int arg) {
    return BaseDSL.attr("guidelineBegin", arg);
  }

  public static Void guidelineEnd(int arg) {
    return BaseDSL.attr("guidelineEnd", arg);
  }

  public static Void guidelinePercent(float arg) {
    return BaseDSL.attr("guidelinePercent", arg);
  }

  public static Void maxHeight(int arg) {
    return BaseDSL.attr("maxHeight", arg);
  }

  public static Void maxWidth(int arg) {
    return BaseDSL.attr("maxWidth", arg);
  }

  public static Void minHeight(int arg) {
    return BaseDSL.attr("minHeight", arg);
  }

  public static Void minWidth(int arg) {
    return BaseDSL.attr("minWidth", arg);
  }

  public static Void optimizationLevel(int arg) {
    return BaseDSL.attr("optimizationLevel", arg);
  }

  public static Void referencedIds(int[] arg) {
    return BaseDSL.attr("referencedIds", arg);
  }

  public static Void type(int arg) {
    return BaseDSL.attr("type", arg);
  }

  public boolean set(View v, String name, final Object arg, final Object old) {
    switch (name) {
      case "allowsGoneWidget":
        if (v instanceof Barrier && arg instanceof Boolean) {
          ((Barrier) v).setAllowsGoneWidget((boolean) arg);
          return true;
        }
        break;
      case "constraintSet":
        if (v instanceof ConstraintLayout && arg instanceof ConstraintSet) {
          ((ConstraintLayout) v).setConstraintSet((ConstraintSet) arg);
          return true;
        }
        break;
      case "contentId":
        if (v instanceof Placeholder && arg instanceof Integer) {
          ((Placeholder) v).setContentId((int) arg);
          return true;
        }
        break;
      case "emptyVisibility":
        if (v instanceof Placeholder && arg instanceof Integer) {
          ((Placeholder) v).setEmptyVisibility((int) arg);
          return true;
        }
        break;
      case "guidelineBegin":
        if (v instanceof Guideline && arg instanceof Integer) {
          ((Guideline) v).setGuidelineBegin((int) arg);
          return true;
        }
        break;
      case "guidelineEnd":
        if (v instanceof Guideline && arg instanceof Integer) {
          ((Guideline) v).setGuidelineEnd((int) arg);
          return true;
        }
        break;
      case "guidelinePercent":
        if (v instanceof Guideline && arg instanceof Float) {
          ((Guideline) v).setGuidelinePercent((float) arg);
          return true;
        }
        break;
      case "maxHeight":
        if (v instanceof ConstraintLayout && arg instanceof Integer) {
          ((ConstraintLayout) v).setMaxHeight((int) arg);
          return true;
        }
        break;
      case "maxWidth":
        if (v instanceof ConstraintLayout && arg instanceof Integer) {
          ((ConstraintLayout) v).setMaxWidth((int) arg);
          return true;
        }
        break;
      case "minHeight":
        if (v instanceof ConstraintLayout && arg instanceof Integer) {
          ((ConstraintLayout) v).setMinHeight((int) arg);
          return true;
        }
        break;
      case "minWidth":
        if (v instanceof ConstraintLayout && arg instanceof Integer) {
          ((ConstraintLayout) v).setMinWidth((int) arg);
          return true;
        }
        break;
      case "optimizationLevel":
        if (v instanceof ConstraintLayout && arg instanceof Integer) {
          ((ConstraintLayout) v).setOptimizationLevel((int) arg);
          return true;
        }
        break;
      case "referencedIds":
        if (v instanceof ConstraintHelper && arg instanceof int[]) {
          ((ConstraintHelper) v).setReferencedIds((int[]) arg);
          return true;
        }
        break;
      case "type":
        if (v instanceof Barrier && arg instanceof Integer) {
          ((Barrier) v).setType((int) arg);
          return true;
        }
        break;
    }
    return false;
  }
}
